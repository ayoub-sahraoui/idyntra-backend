# ============================================================================
# Production Environment Configuration Template
# ============================================================================
# IMPORTANT: Copy this file to .env.production and fill in all values
# DO NOT commit .env.production to version control
# Generate secure passwords: openssl rand -base64 32
# ============================================================================

# ============================================================================
# BUILD INFORMATION
# ============================================================================
BUILD_DATE=2024-01-01T00:00:00Z
VCS_REF=main
VERSION=2.0.0
DATA_DIR=./data

# ============================================================================
# APPLICATION SETTINGS
# ============================================================================
APP_NAME=ID Verification API
DEBUG=false
LOG_LEVEL=INFO
WORKERS=4

# ============================================================================
# SECURITY (CRITICAL - MUST CHANGE)
# ============================================================================
# Generate: openssl rand -base64 64
SECRET_KEY=CHANGE_ME_GENERATE_SECURE_RANDOM_STRING_64_CHARS_MIN

# Generate: openssl rand -base64 32
API_KEY_HASH_SALT=CHANGE_ME_GENERATE_SECURE_RANDOM_STRING_32_CHARS_MIN

# Comma-separated list of valid API keys (store hashed in production)
# Generate: python -c "import secrets; print(secrets.token_urlsafe(32))"
VALID_API_KEYS=your-api-key-1,your-api-key-2

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================
POSTGRES_DB=idverification
POSTGRES_USER=idv_user
# Generate: openssl rand -base64 32
POSTGRES_PASSWORD=CHANGE_ME_SECURE_DATABASE_PASSWORD

# Full connection string (auto-constructed in docker-compose)
# DATABASE_URL=postgresql://idv_user:password@postgres:5432/idverification

# ============================================================================
# REDIS CONFIGURATION
# ============================================================================
# Generate: openssl rand -base64 32
REDIS_PASSWORD=CHANGE_ME_SECURE_REDIS_PASSWORD
REDIS_CACHE_TTL=3600

# Full connection string (auto-constructed in docker-compose)
# REDIS_URL=redis://:password@redis:6379/0

# ============================================================================
# CORS AND HOST VALIDATION
# ============================================================================
# Comma-separated list of allowed origins (NO WILDCARDS in production!)
ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com,https://app.yourdomain.com

# Comma-separated list of allowed hosts
ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com,api.yourdomain.com,localhost

# ============================================================================
# RATE LIMITING
# ============================================================================
MAX_REQUESTS_PER_MINUTE=60
MAX_REQUESTS_PER_HOUR=1000
MAX_REQUESTS_PER_DAY=10000

# ============================================================================
# HARDWARE CONFIGURATION
# ============================================================================
# Set to 0 for GPU, 1 for CPU-only
CPU_ONLY=1

# GPU device (if using GPU)
CUDA_VISIBLE_DEVICES=0

# ============================================================================
# VERIFICATION THRESHOLDS
# ============================================================================
# Liveness Detection
LIVENESS_SCORE_MIN=0.65
LIVENESS_SCORE_HIGH=0.80
BLUR_THRESHOLD=100.0

# Face Matching
FACE_MATCH_CONFIDENCE_MIN=70.0
FACE_MATCH_CONFIDENCE_HIGH=85.0
FACE_MATCH_TOLERANCE=0.5

# Document Authenticity
AUTHENTICITY_SCORE_MIN=60.0
AUTHENTICITY_SCORE_HIGH=75.0

# Deepfake Detection
DEEPFAKE_CONFIDENCE_MIN=0.70
IMAGE_QUALITY_MIN=60.0

# ============================================================================
# MODEL CONFIGURATION
# ============================================================================
DEEPFAKE_MODEL_NAME=dima806/deepfake_vs_real_image_detection

# ============================================================================
# OCR CONFIGURATION
# ============================================================================
TESSDATA_PREFIX=/usr/share/tesseract-ocr/4/tessdata

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================
LOG_FILE=/app/logs/idv_api.log
LOG_MAX_BYTES=10485760
LOG_BACKUP_COUNT=5

# JSON structured logging
ENABLE_JSON_LOGGING=true

# Log to external service (optional)
# ENABLE_SYSLOG=false
# SYSLOG_HOST=logs.example.com
# SYSLOG_PORT=514

# ============================================================================
# MONITORING & METRICS
# ============================================================================
ENABLE_METRICS=true
METRICS_PORT=9090

# Sentry (Error Tracking) - Optional
# SENTRY_DSN=https://examplePublicKey@o0.ingest.sentry.io/0
# SENTRY_ENVIRONMENT=production
# SENTRY_TRACES_SAMPLE_RATE=0.1

# ============================================================================
# TIMEOUTS
# ============================================================================
REQUEST_TIMEOUT=30
DATABASE_TIMEOUT=10
REDIS_TIMEOUT=5

# ============================================================================
# FILE UPLOAD
# ============================================================================
MAX_UPLOAD_SIZE=10485760
ALLOWED_EXTENSIONS=jpg,jpeg,png,pdf

# Temporary file cleanup interval (seconds)
TEMP_FILE_CLEANUP_INTERVAL=3600

# ============================================================================
# NGINX CONFIGURATION
# ============================================================================
HTTP_PORT=80
HTTPS_PORT=443

# SSL Certificate paths (inside container)
SSL_CERTIFICATE=/etc/nginx/ssl/cert.pem
SSL_CERTIFICATE_KEY=/etc/nginx/ssl/key.pem

# ============================================================================
# GRAFANA CONFIGURATION
# ============================================================================
GRAFANA_PORT=3001
GRAFANA_ADMIN_USER=admin
# Generate: openssl rand -base64 16
GRAFANA_ADMIN_PASSWORD=CHANGE_ME_SECURE_GRAFANA_PASSWORD
GRAFANA_ROOT_URL=https://grafana.yourdomain.com

# ============================================================================
# BACKUP CONFIGURATION
# ============================================================================
# Backup schedule (cron format)
BACKUP_SCHEDULE="0 2 * * *"  # Daily at 2 AM

# S3 Backup (Optional)
# AWS_ACCESS_KEY_ID=
# AWS_SECRET_ACCESS_KEY=
# AWS_S3_BUCKET=idyntra-backups
# AWS_S3_REGION=us-east-1

# ============================================================================
# EMAIL NOTIFICATIONS (Optional)
# ============================================================================
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USER=notifications@yourdomain.com
# SMTP_PASSWORD=your-smtp-password
# SMTP_FROM=ID Verification API <noreply@yourdomain.com>
# ALERT_EMAIL=admin@yourdomain.com

# ============================================================================
# WEBHOOK NOTIFICATIONS (Optional)
# ============================================================================
# WEBHOOK_URL=https://hooks.slack.com/services/YOUR/WEBHOOK/URL
# WEBHOOK_EVENTS=verification_failed,system_error,high_load

# ============================================================================
# FEATURE FLAGS
# ============================================================================
ENABLE_SWAGGER_UI=false
ENABLE_REDOC=false
ENABLE_API_DOCS=false
ENABLE_ADMIN_PANEL=false

# ============================================================================
# PERFORMANCE TUNING
# ============================================================================
# Uvicorn workers (default: 4, adjust based on CPU cores)
WORKERS=4

# Database connection pool
DB_POOL_SIZE=20
DB_MAX_OVERFLOW=10

# Redis connection pool
REDIS_POOL_SIZE=50

# Thread pool for CPU-bound tasks
THREAD_POOL_SIZE=4

# ============================================================================
# MAINTENANCE MODE
# ============================================================================
MAINTENANCE_MODE=false
MAINTENANCE_MESSAGE="System is under maintenance. Please try again later."

# ============================================================================
# DEVELOPMENT ONLY (Remove in production)
# ============================================================================
# Enable hot reload (DEV ONLY)
# RELOAD=false

# Enable profiling (DEV ONLY)
# ENABLE_PROFILING=false

# ============================================================================
# NOTES:
# ============================================================================
# 1. All passwords MUST be changed before deployment
# 2. Never commit this file with real credentials
# 3. Use secrets management in production (AWS Secrets Manager, Vault, etc.)
# 4. Rotate credentials regularly
# 5. Use strong, unique passwords for each service
# 6. Enable SSL/TLS in production
# 7. Set up regular backups
# 8. Configure monitoring and alerting
# 9. Test disaster recovery procedures
# 10. Review security settings regularly
# ============================================================================
